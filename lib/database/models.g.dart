// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'models.dart';

// **************************************************************************
// SqfEntityGenerator
// **************************************************************************

// ignore_for_file: non_constant_identifier_names

//  These classes was generated by SqfEntity
//  Copyright (c) 2019, All rights reserved. Use of this source code is governed by a
//  Apache license that can be found in the LICENSE file.

//  To use these SqfEntity classes do following:
//  - import model.dart into where to use
//  - start typing ex:Restaurant.select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
//  - and then just put end of filters / or end of only select()  toSingle() / or toList()
//  - you can select one or return List<yourObject> by your filters and orders
//  - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
//    Enjoy.. Huseyin Tokpunar

// BEGIN TABLES
// Restaurant TABLE
class TableRestaurant extends SqfEntityTableBase {
  TableRestaurant() {
    // declare properties of EntityTable
    tableName = 'restaurant';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('name', DbType.text, isNotNull: true),
      SqfEntityFieldBase('latitude', DbType.real),
      SqfEntityFieldBase('longitude', DbType.real),
    ];
    super.init();
  }

  static SqfEntityTableBase? _instance;

  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableRestaurant();
  }
}

// Food TABLE
class TableFood extends SqfEntityTableBase {
  TableFood() {
    // declare properties of EntityTable
    tableName = 'food';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('name', DbType.text, isNotNull: true),
      SqfEntityFieldBase('calories', DbType.real, isNotNull: true),
      SqfEntityFieldRelationshipBase(
          TableRestaurant.getInstance, DeleteRule.CASCADE,
          relationType: RelationType.ONE_TO_MANY,
          fieldName: 'id_restaurant',
          isNotNull: true),
    ];
    super.init();
  }

  static SqfEntityTableBase? _instance;

  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableFood();
  }
}
// END TABLES

// BEGIN DATABASE MODEL
class MyDbModel extends SqfEntityModelProvider {
  MyDbModel() {
    databaseName = myDbModel.databaseName;
    password = myDbModel.password;
    dbVersion = myDbModel.dbVersion;
    preSaveAction = myDbModel.preSaveAction;
    logFunction = myDbModel.logFunction;
    databaseTables = [
      TableRestaurant.getInstance,
      TableFood.getInstance,
    ];

    bundledDatabasePath = myDbModel
        .bundledDatabasePath; //'assets/sample.db'; // This value is optional. When bundledDatabasePath is empty then EntityBase creats a new database when initializing the database
  }

  Map<String, dynamic> getControllers() {
    final controllers = <String, dynamic>{};

    return controllers;
  }
}
// END DATABASE MODEL

// BEGIN ENTITIES
// region Restaurant
class Restaurant extends TableBase {
  Restaurant({this.id, this.name, this.latitude, this.longitude}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }

  Restaurant.withFields(this.name, this.latitude, this.longitude) {
    _setDefaultValues();
  }

  Restaurant.withId(this.id, this.name, this.latitude, this.longitude) {
    _setDefaultValues();
  }

  // fromMap v2.0
  Restaurant.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['name'] != null) {
      name = o['name'].toString();
    }
    if (o['latitude'] != null) {
      latitude = double.tryParse(o['latitude'].toString());
    }
    if (o['longitude'] != null) {
      longitude = double.tryParse(o['longitude'].toString());
    }
  }

  // FIELDS (Restaurant)
  int? id;
  String? name;
  double? latitude;
  double? longitude;

  // end FIELDS (Restaurant)

// COLLECTIONS & VIRTUALS (Restaurant)
  /// to load children of items to this field, use preload parameter. Ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plFoods', 'plField2'..]) or so on..
  List<Food>? plFoods;

  /// get Food(s) filtered by id=id_restaurant
  FoodFilterBuilder? getFoods(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    if (id == null) {
      return null;
    }
    return Food()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .id_restaurant
        .equals(id)
        .and;
  }

// END COLLECTIONS & VIRTUALS (Restaurant)

  static const bool _softDeleteActivated = false;
  RestaurantManager? __mnRestaurant;

  RestaurantManager get _mnRestaurant {
    return __mnRestaurant = __mnRestaurant ?? RestaurantManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (name != null || !forView) {
      map['name'] = name;
    }
    if (latitude != null || !forView) {
      map['latitude'] = latitude;
    }
    if (longitude != null || !forView) {
      map['longitude'] = longitude;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (name != null || !forView) {
      map['name'] = name;
    }
    if (latitude != null || !forView) {
      map['latitude'] = latitude;
    }
    if (longitude != null || !forView) {
      map['longitude'] = longitude;
    }

// COLLECTIONS (Restaurant)
    if (!forQuery) {
      map['Foods'] = await getFoods()!.toMapList();
    }
// END COLLECTIONS (Restaurant)

    return map;
  }

  /// This method returns Json String [Restaurant]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Restaurant]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [name, latitude, longitude];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [id, name, latitude, longitude];
  }

  static Future<List<Restaurant>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Restaurant>[];
    try {
      objList = list
          .map((restaurant) =>
              Restaurant.fromMap(restaurant as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Restaurant.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Restaurant>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Restaurant> objList = <Restaurant>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Restaurant.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('restaurant.plFoods') && */ (preloadFields ==
                null ||
            preloadFields.contains('plFoods'))) {
          /*_loadedfields!.add('restaurant.plFoods'); */ obj.plFoods =
              obj.plFoods ??
                  await obj.getFoods()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      objList.add(obj);
    }
    return objList;
  }

  /// returns Restaurant by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [Restaurant] if exist, otherwise returns null
  Future<Restaurant?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Restaurant? obj;
    final data = await _mnRestaurant.getById([id]);
    if (data.length != 0) {
      obj = Restaurant.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('restaurant.plFoods') && */ (preloadFields ==
                null ||
            preloadFields.contains('plFoods'))) {
          /*_loadedfields!.add('restaurant.plFoods'); */ obj.plFoods =
              obj.plFoods ??
                  await obj.getFoods()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Restaurant) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnRestaurant.insert(this, ignoreBatch);
    } else {
      await _mnRestaurant.update(this);
    }

    return id;
  }

  /// Saves the (Restaurant) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnRestaurant.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnRestaurant.updateOrThrow(this);
    }

    return id;
  }

  /// saveAs Restaurant. Returns a new Primary Key value of Restaurant

  /// <returns>Returns a new Primary Key value of Restaurant
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    id = null;

    return save(ignoreBatch: ignoreBatch);
  }

  void rollbackId() {
    if (isInsert == true) {
      id = null;
    }
  }

  /// saveAll method saves the sent List<Restaurant> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Restaurant> restaurants) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await MyDbModel().batchStart();
    for (final obj in restaurants) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await MyDbModel().batchCommit();
      for (int i = 0; i < restaurants.length; i++) {
        if (restaurants[i].id == null) {
          restaurants[i].id = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnRestaurant.rawInsert(
          'INSERT OR REPLACE INTO restaurant (id, name, latitude, longitude)  VALUES (?,?,?,?)',
          [id, name, latitude, longitude],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Restaurant id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Restaurant id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Restaurant Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Restaurant>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<Restaurant> restaurants) async {
    final results = await _mnRestaurant.rawInsertAll(
        'INSERT OR REPLACE INTO restaurant (id, name, latitude, longitude)  VALUES (?,?,?,?)',
        restaurants);
    return results;
  }

  /// Deletes Restaurant

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete Restaurant invoked (id=$id)');
    var result = BoolResult(success: false);
    {
      result =
          await Food().select().id_restaurant.equals(id).and.delete(hardDelete);
    }
    if (!result.success) {
      return result;
    }
    if (!_softDeleteActivated || hardDelete) {
      return _mnRestaurant
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnRestaurant.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [Restaurant] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  RestaurantFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return RestaurantFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  RestaurantFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return RestaurantFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {}
// END METHODS
// BEGIN CUSTOM CODE
/*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       {
         return '$firstName $lastName';
       }
      ''');
     */
// END CUSTOM CODE
}
// endregion restaurant

// region RestaurantField
class RestaurantField extends FilterBase {
  RestaurantField(RestaurantFilterBuilder restaurantFB) : super(restaurantFB);

  @override
  RestaurantFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as RestaurantFilterBuilder;
  }

  @override
  RestaurantFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as RestaurantFilterBuilder;
  }

  @override
  RestaurantFilterBuilder isNull() {
    return super.isNull() as RestaurantFilterBuilder;
  }

  @override
  RestaurantFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as RestaurantFilterBuilder;
  }

  @override
  RestaurantFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as RestaurantFilterBuilder;
  }

  @override
  RestaurantFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as RestaurantFilterBuilder;
  }

  @override
  RestaurantFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as RestaurantFilterBuilder;
  }

  @override
  RestaurantFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as RestaurantFilterBuilder;
  }

  @override
  RestaurantFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as RestaurantFilterBuilder;
  }

  @override
  RestaurantFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as RestaurantFilterBuilder;
  }

  @override
  RestaurantFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as RestaurantFilterBuilder;
  }

  @override
  RestaurantFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as RestaurantFilterBuilder;
  }

  @override
  RestaurantField get not {
    return super.not as RestaurantField;
  }
}
// endregion RestaurantField

// region RestaurantFilterBuilder
class RestaurantFilterBuilder extends ConjunctionBase {
  RestaurantFilterBuilder(Restaurant obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnRestaurant = obj._mnRestaurant;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  RestaurantManager? _mnRestaurant;

  /// put the sql keyword 'AND'
  @override
  RestaurantFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  RestaurantFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  RestaurantFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  RestaurantFilterBuilder where(String? whereCriteria,
      {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  RestaurantFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  RestaurantFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  RestaurantFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  RestaurantFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  RestaurantFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  RestaurantFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  RestaurantFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  RestaurantField _setField(
      RestaurantField? field, String colName, DbType dbtype) {
    return RestaurantField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  RestaurantField? _id;

  RestaurantField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  RestaurantField? _name;

  RestaurantField get name {
    return _name = _setField(_name, 'name', DbType.text);
  }

  RestaurantField? _latitude;

  RestaurantField get latitude {
    return _latitude = _setField(_latitude, 'latitude', DbType.real);
  }

  RestaurantField? _longitude;

  RestaurantField get longitude {
    return _longitude = _setField(_longitude, 'longitude', DbType.real);
  }

  /// Deletes List<Restaurant> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);
    // Delete sub records where in (Food) according to DeleteRule.CASCADE
    final idListFoodBYid_restaurant = toListPrimaryKeySQL(false);
    final resFoodBYid_restaurant = await Food()
        .select()
        .where('id_restaurant IN (${idListFoodBYid_restaurant['sql']})',
            parameterValue: idListFoodBYid_restaurant['args'])
        .delete(hardDelete);
    if (!resFoodBYid_restaurant.success) {
      return resFoodBYid_restaurant;
    }

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnRestaurant!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnRestaurant!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from restaurant ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnRestaurant!.updateBatch(qparams, values);
  }

  /// This method always returns [Restaurant] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Restaurant?
  @override
  Future<Restaurant?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnRestaurant!.toList(qparams);
    final data = await objFuture;
    Restaurant? obj;
    if (data.isNotEmpty) {
      obj = Restaurant.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('restaurant.plFoods') && */ (preloadFields ==
                null ||
            preloadFields.contains('plFoods'))) {
          /*_loadedfields!.add('restaurant.plFoods'); */ obj.plFoods =
              obj.plFoods ??
                  await obj.getFoods()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [Restaurant]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Restaurant?
  @override
  Future<Restaurant> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        Restaurant();
  }

  /// This method returns int. [Restaurant]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? restaurantCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final restaurantsFuture = await _mnRestaurant!.toList(qparams);
    final int count = restaurantsFuture[0]['CNT'] as int;
    if (restaurantCount != null) {
      restaurantCount(count);
    }
    return count;
  }

  /// This method returns List<Restaurant> [Restaurant]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<Restaurant>
  @override
  Future<List<Restaurant>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Restaurant> restaurantsData = await Restaurant.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return restaurantsData;
  }

  /// This method returns Json String [Restaurant]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Restaurant]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Restaurant]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnRestaurant!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Restaurant]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM restaurant WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnRestaurant!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Restaurant]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnRestaurant!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Restaurant.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnRestaurant!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion RestaurantFilterBuilder

// region RestaurantFields
class RestaurantFields {
  static TableField? _fId;

  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fName;

  static TableField get name {
    return _fName = _fName ?? SqlSyntax.setField(_fName, 'name', DbType.text);
  }

  static TableField? _fLatitude;

  static TableField get latitude {
    return _fLatitude =
        _fLatitude ?? SqlSyntax.setField(_fLatitude, 'latitude', DbType.real);
  }

  static TableField? _fLongitude;

  static TableField get longitude {
    return _fLongitude = _fLongitude ??
        SqlSyntax.setField(_fLongitude, 'longitude', DbType.real);
  }
}
// endregion RestaurantFields

//region RestaurantManager
class RestaurantManager extends SqfEntityProvider {
  RestaurantManager()
      : super(MyDbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'restaurant';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion RestaurantManager
// region Food
class Food extends TableBase {
  Food({this.id, this.name, this.calories, this.id_restaurant}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }

  Food.withFields(this.name, this.calories, this.id_restaurant) {
    _setDefaultValues();
  }

  Food.withId(this.id, this.name, this.calories, this.id_restaurant) {
    _setDefaultValues();
  }

  // fromMap v2.0
  Food.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['name'] != null) {
      name = o['name'].toString();
    }
    if (o['calories'] != null) {
      calories = double.tryParse(o['calories'].toString());
    }
    id_restaurant = int.tryParse(o['id_restaurant'].toString());

    // RELATIONSHIPS FromMAP
    plRestaurant = o['restaurant'] != null
        ? Restaurant.fromMap(o['restaurant'] as Map<String, dynamic>)
        : null;
    // END RELATIONSHIPS FromMAP
  }

  // FIELDS (Food)
  int? id;
  String? name;
  double? calories;
  int? id_restaurant;

  // end FIELDS (Food)

// RELATIONSHIPS (Food)
  /// to load parent of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plRestaurant', 'plField2'..]) or so on..
  Restaurant? plRestaurant;

  /// get Restaurant By Id_restaurant
  Future<Restaurant?> getRestaurant(
      {bool loadParents = false, List<String>? loadedFields}) async {
    final _obj = await Restaurant().getById(id_restaurant,
        loadParents: loadParents, loadedFields: loadedFields);
    return _obj;
  }

  // END RELATIONSHIPS (Food)

  static const bool _softDeleteActivated = false;
  FoodManager? __mnFood;

  FoodManager get _mnFood {
    return __mnFood = __mnFood ?? FoodManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (name != null || !forView) {
      map['name'] = name;
    }
    if (calories != null || !forView) {
      map['calories'] = calories;
    }
    if (id_restaurant != null) {
      map['id_restaurant'] = forView
          ? plRestaurant == null
              ? id_restaurant
              : plRestaurant!.name
          : id_restaurant;
    } else if (id_restaurant != null || !forView) {
      map['id_restaurant'] = null;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (name != null || !forView) {
      map['name'] = name;
    }
    if (calories != null || !forView) {
      map['calories'] = calories;
    }
    if (id_restaurant != null) {
      map['id_restaurant'] = forView
          ? plRestaurant == null
              ? id_restaurant
              : plRestaurant!.name
          : id_restaurant;
    } else if (id_restaurant != null || !forView) {
      map['id_restaurant'] = null;
    }

    return map;
  }

  /// This method returns Json String [Food]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Food]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [name, calories, id_restaurant];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [id, name, calories, id_restaurant];
  }

  static Future<List<Food>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Food>[];
    try {
      objList = list
          .map((food) => Food.fromMap(food as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Food.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Food>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Food> objList = <Food>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Food.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plRestaurant'))) {
          obj.plRestaurant = obj.plRestaurant ??
              await obj.getRestaurant(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD

      objList.add(obj);
    }
    return objList;
  }

  /// returns Food by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [Food] if exist, otherwise returns null
  Future<Food?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Food? obj;
    final data = await _mnFood.getById([id]);
    if (data.length != 0) {
      obj = Food.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plRestaurant'))) {
          obj.plRestaurant = obj.plRestaurant ??
              await obj.getRestaurant(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD

    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Food) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnFood.insert(this, ignoreBatch);
    } else {
      await _mnFood.update(this);
    }

    return id;
  }

  /// Saves the (Food) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnFood.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnFood.updateOrThrow(this);
    }

    return id;
  }

  /// saveAs Food. Returns a new Primary Key value of Food

  /// <returns>Returns a new Primary Key value of Food
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    id = null;

    return save(ignoreBatch: ignoreBatch);
  }

  void rollbackId() {
    if (isInsert == true) {
      id = null;
    }
  }

  /// saveAll method saves the sent List<Food> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Food> foods) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await MyDbModel().batchStart();
    for (final obj in foods) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await MyDbModel().batchCommit();
      for (int i = 0; i < foods.length; i++) {
        if (foods[i].id == null) {
          foods[i].id = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnFood.rawInsert(
          'INSERT OR REPLACE INTO food (id, name, calories, id_restaurant)  VALUES (?,?,?,?)',
          [id, name, calories, id_restaurant],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true, successMessage: 'Food id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Food id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Food Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Food>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<Food> foods) async {
    final results = await _mnFood.rawInsertAll(
        'INSERT OR REPLACE INTO food (id, name, calories, id_restaurant)  VALUES (?,?,?,?)',
        foods);
    return results;
  }

  /// Deletes Food

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete Food invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnFood
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnFood.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [Food] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  FoodFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return FoodFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  FoodFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return FoodFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {}
// END METHODS
// BEGIN CUSTOM CODE
/*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       {
         return '$firstName $lastName';
       }
      ''');
     */
// END CUSTOM CODE
}
// endregion food

// region FoodField
class FoodField extends FilterBase {
  FoodField(FoodFilterBuilder foodFB) : super(foodFB);

  @override
  FoodFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as FoodFilterBuilder;
  }

  @override
  FoodFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as FoodFilterBuilder;
  }

  @override
  FoodFilterBuilder isNull() {
    return super.isNull() as FoodFilterBuilder;
  }

  @override
  FoodFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as FoodFilterBuilder;
  }

  @override
  FoodFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as FoodFilterBuilder;
  }

  @override
  FoodFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as FoodFilterBuilder;
  }

  @override
  FoodFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as FoodFilterBuilder;
  }

  @override
  FoodFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as FoodFilterBuilder;
  }

  @override
  FoodFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as FoodFilterBuilder;
  }

  @override
  FoodFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as FoodFilterBuilder;
  }

  @override
  FoodFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as FoodFilterBuilder;
  }

  @override
  FoodFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as FoodFilterBuilder;
  }

  @override
  FoodField get not {
    return super.not as FoodField;
  }
}
// endregion FoodField

// region FoodFilterBuilder
class FoodFilterBuilder extends ConjunctionBase {
  FoodFilterBuilder(Food obj, bool? getIsDeleted) : super(obj, getIsDeleted) {
    _mnFood = obj._mnFood;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  FoodManager? _mnFood;

  /// put the sql keyword 'AND'
  @override
  FoodFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  FoodFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  FoodFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  FoodFilterBuilder where(String? whereCriteria, {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  FoodFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  FoodFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  FoodFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  FoodFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  FoodFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  FoodFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  FoodFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  FoodField _setField(FoodField? field, String colName, DbType dbtype) {
    return FoodField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  FoodField? _id;

  FoodField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  FoodField? _name;

  FoodField get name {
    return _name = _setField(_name, 'name', DbType.text);
  }

  FoodField? _calories;

  FoodField get calories {
    return _calories = _setField(_calories, 'calories', DbType.real);
  }

  FoodField? _id_restaurant;

  FoodField get id_restaurant {
    return _id_restaurant =
        _setField(_id_restaurant, 'id_restaurant', DbType.integer);
  }

  /// Deletes List<Food> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnFood!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnFood!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from food ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnFood!.updateBatch(qparams, values);
  }

  /// This method always returns [Food] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Food?
  @override
  Future<Food?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnFood!.toList(qparams);
    final data = await objFuture;
    Food? obj;
    if (data.isNotEmpty) {
      obj = Food.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plRestaurant'))) {
          obj.plRestaurant = obj.plRestaurant ??
              await obj.getRestaurant(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD

    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [Food]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Food?
  @override
  Future<Food> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        Food();
  }

  /// This method returns int. [Food]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? foodCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final foodsFuture = await _mnFood!.toList(qparams);
    final int count = foodsFuture[0]['CNT'] as int;
    if (foodCount != null) {
      foodCount(count);
    }
    return count;
  }

  /// This method returns List<Food> [Food]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<Food>
  @override
  Future<List<Food>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Food> foodsData = await Food.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return foodsData;
  }

  /// This method returns Json String [Food]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Food]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Food]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnFood!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Food]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM food WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnFood!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Food]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnFood!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Food.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnFood!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion FoodFilterBuilder

// region FoodFields
class FoodFields {
  static TableField? _fId;

  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fName;

  static TableField get name {
    return _fName = _fName ?? SqlSyntax.setField(_fName, 'name', DbType.text);
  }

  static TableField? _fCalories;

  static TableField get calories {
    return _fCalories =
        _fCalories ?? SqlSyntax.setField(_fCalories, 'calories', DbType.real);
  }

  static TableField? _fId_restaurant;

  static TableField get id_restaurant {
    return _fId_restaurant = _fId_restaurant ??
        SqlSyntax.setField(_fId_restaurant, 'id_restaurant', DbType.integer);
  }
}
// endregion FoodFields

//region FoodManager
class FoodManager extends SqfEntityProvider {
  FoodManager()
      : super(MyDbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'food';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion FoodManager
class MyDbModelSequenceManager extends SqfEntityProvider {
  MyDbModelSequenceManager() : super(MyDbModel());
}
// END OF ENTITIES
